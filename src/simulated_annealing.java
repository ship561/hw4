import java.util.Arrays;
import java.util.LinkedList;
import java.util.Random;


public class simulated_annealing {
	//int[] A = {69,69,78,84,141,186,189,189,225,244,244,244,244,244,244,244,435,471,471,471,508,535,535,660,782,782,935,953,953,995,1039,1068,1099,1099,1099,1100,1349,1432,1484,1529,1591,1611,1620,1742,1856,1915,2127,2205,2234,2249,2315,2478,2664,2664,2669,2670,2741,2747,2750,2756,2757,2768,2791,2808,2893,2914,2919,3047,3132,3254,3254,3324,3341,3489,3535,3649,3714,3865,3874,3982,4065,4075,4098,4190,4194,4224,4335,4501,4501,4684,4827,4905,4937,5095,5106,5113,5127,5137,5142,5219,5454,5458,5630,5963,5970,6348,6364,6421,6452,6524,6524,6715,6749,6760,6998,7058,7187,7342,7595,7646,7910,8041,8054,8189,8200,8253,8346,8406,8510,8623,8623,8880,8912,8984,9061,9101,9148,9148,9177,9195,9195,9210,9245,9288,9487,9814,9921,9989,10591,10617,10633,10659,10704,10772,11040,11245,11398,11436,11457,11711,11725,12164,12261,12588,12588,12656,13063,13070,13070,13291,13336,13543,13580,13646,13996,14073,14178,14962,15145,15533,15617,15724,15842,15993,16280,16466,16693,16831,17638,17791,18043,18072,18145,18150,18178,18178,18374,18442,18619,18870,18938,18974,19510,19549,19577,19811,19853,19899,19966,20230,20242,20733,21379,21579,21630,21770,21779,21816,21841,22614,22979,23305,23403,23543,23811,23919,23919,24339,25015,25153,25573,25807,25986,26521,26541,26691,28611,28821,29026,29063,29175,30032,30581,31449,31475,31565,31773,32185,32874,33485,33684,34126,35848,36048,37911,38927,39292,39735,40184,41268,41667,41927,42749,45144,45952,46142,47613,48095,48450,49760,50663,51492,52123,53745,53928,54774,54855,55523,61110,67307,67926,82171,82900,83067,91632,93006,95920,103302};
	//int[] B = {12,101,162,178,249,498,504,730,1557,1620,1806,1913,2099,2107,2335,2506,2763,2786,2894,3007,3166,3167,3284,3334,3374,3417,3642,3698,4218,4547,4556,4687,4878,4897,4946,4946,4995,5344,5554,6170,6174,6481,6952,7009,7270,7616,7883,8075,8085,8697,9614,9739,10312,10360,10482,10559,10914,11058,11068,12396,12437,12754,12854,12928,12977,13009,13095,13128,13417,13436,13969,14466,14475,14835,14882,14977,15062,15415,15440,15567,15855,16481,16481,16741,17267,17610,17626,17715,18043,18488,18627,18858,19404,19976,20233,20234,20575,20810,21401,21812,23391,23605,23758,24018,24183,24335,24461,24503,24700,24820,25588,25668,25728,25931,26300,27070,27238,27244,27290,28217,28270,28481,28582,28703,28871,28887,29485,30152,30396,30554,32319,32535,32650,33119,33522,34111,35071,35071,36019,36938,37236,37485,37516,37904,37904,38583,40525,42368,42724,42730,43326,43629,44525,44549,44922,47077,48165,48964,49950,51519,55145,55638,56596,58586,58762,60041,60323,64508,64611,66299,68447,71874,73319,73958,76733,79243,83935,85877,87122,91795,111546,111629,116009};
	//int[] C = {12,69,69,78,84,101,124,141,158,162,178,186,189,189,225,236,244,244,244,244,244,244,244,249,255,260,327,327,336,435,471,471,471,495,498,504,508,512,532,535,535,571,660,667,673,716,730,755,782,782,935,948,953,953,953,995,1005,1039,1068,1092,1099,1099,1099,1100,1126,1273,1309,1349,1432,1484,1486,1529,1554,1557,1591,1611,1620,1620,1742,1793,1806,1821,1821,1834,1856,1880,1913,1915,1949,1967,1967,1972,2081,2099,2107,2113,2127,2205,2205,2234,2249,2315,2332,2335,2349,2367,2414,2428,2431,2447,2449,2478,2484,2490,2506,2511,2529,2639,2664,2664,2669,2670,2685,2741,2747,2750,2756,2757,2763,2768,2786,2791,2808,2860,2893,2894,2898,2914,2919,2937,3007,3047,3124,3125,3125,3130,3132,3141,3166,3167,3254,3254,3284,3293,3324,3334,3341,3360,3374,3417,3489,3535,3578,3649,3664,3664,3692,3698,3714,3874,3906,3912,4065,4075,4098,4144,4190,4194,4218,4246,4250,4322,4335,4501,4501,4547,4556,4624,4684,4687,4823,4827,4878,4897,4905,4934,4937,4995,5095,5106,5127,5137,5142,5164,5169,5169,5189,5214,5219,5334,5454,5458,5498,5498,5554,5612,5630,5710,5826,5827,5885,5885,5962,5963,6061,6125,6180,6320,6348,6364,6421,6452,6481,6524,6524,6524,6602,6705,6715,6749,6760,6796,6858,6917,6952,6998,7009,7058,7170,7236,7248,7259,7342,7362,7545,7590,7646,7781,7844,7868,7883,7910,7983,8041,8054,8065,8075,8085,8247,8253,8346,8406,8510,8539,8583,8687,8820,8830,8868,8868,8880,8984,9061,9101,9148,9148,9174,9177,9200,9288,9311,9356,9596,9614,9750,9809,9814,9824,9981,9989,10031,10118,10122,10277,10360,10436,10559,10591,10621,10621,10633,10659,10682,11058,11068,11245,11261,11264,11283,11398,11436,11457,11648,11655,11668,11725,11992,12178,12396,12528,12656,12754,12762,12854,12892,12928,12977,13063,13070,13070,13095,13291,13336,13417,13543,13544,13581,13646,13996,14004,14073,14178,14246,14466,14514,14514,14574,14835,14844,14882,15062,15213,15377,15440,15533,15567,15610,15617,15803,15842,15855,15998,16196,16280,16309,16466,16685,16693,16788,16831,16893,17587,17609,17626,17653,17783,17791,18150,18152,18259,18310,18619,18740,18870,18974,19036,19515,19549,19577,19699,19710,19811,19853,19976,20233,20318,20575,20821,20867,21579,21580,21630,21779,21812,21925,22098,22098,22416,22531,23403,23450,23543,24183,24210,24461,25153,25474,25629,25725,25728,25905,25931,26261,26300,26336,26541,26691,26749,27981,28083,28131,28270,28481,28821,29026,29485,30032,30152,30554,30581,30857,31773,32649,33548,34126,34775,35183,35591,35958,37911,39300,40898,41268,41927,42169,50700,60041,60357,64508,66614};

	int[] A = { 5509,5626,6527,6766,7233,16841};
	int[] B = { 3526,4878,5643,5804,7421,21230};
	int[] C = { 1120,1868,2564,2752,3240,3526,3758,3775,4669,5509,15721};
	int n;

	simulated_annealing() {
		for(int i=0; i<A.length; i++) {
			n+=A[i];
		}
	}

	int[] multiset_C(int[] a, int[] b) {		//generates a new multiset C from sets A and B
		int x = 0, y=0, k=0;
		int Sa=0, Sb=0, Sc=0;
		LinkedList<Integer> c = new LinkedList<Integer>();
		while(x<a.length || y<b.length){
			try {
				if(Sa+a[x] <= Sb+b[y]) {
					Sa += a[x];
					c.add((int)Sa - Sc);
					k++;
					Sc = Sa;
					x++; 
				} else {
					Sb += b[y];
					c.add((int)Sb - Sc);
					k++;
					Sc = Sb;
					y++;
				}
			} catch (ArrayIndexOutOfBoundsException e) {
				if (x>=a.length){
					Sb += b[y];
					c.add(Sb - Sc);
					k++;
					Sc = Sb;
					y++;
				} else if (y>=b.length){
					Sa += a[x];
					c.add(Sa - Sc);
					k++;
					Sc = Sa;
					x++; 
				}
			}
		}
		int[] C = new int[c.size()-1];
		for(int i=0; i< C.length; i++) {
			C[i]=c.pop();
		}
		return C;
	}

	double E(int[] c) {		//returns fitness function
		double sum=0;
		for(int i=0; i<c.length; i++) {
			sum += Math.pow(c[i]-this.C[i], 2)/this.C[i];
		}
		return sum;
	}
	int[] randomN(int[] arr) {		//randomizes the array to produce next states
		int[] tempArr = new int[arr.length];
		for (int i=0; i < arr.length; i++)
			tempArr[i] = arr[i];
		Random r = new Random();
		for (int i=0; i<arr.length; i++) {
			int randomPosition = r.nextInt(arr.length);
			int temp = tempArr[i];
			tempArr[i] = tempArr[randomPosition];
			tempArr[randomPosition] = temp;
		}
		return tempArr;
	}

	int[] swap(int[] arr) {
		int[] tempArr = new int[arr.length];
		for (int i=0; i < arr.length; i++)
			tempArr[i] = arr[i];
		Random r = new Random();
		int i = 0;
		int j = 0;
		while (i == j) {
			i = r.nextInt(arr.length);
			j = r.nextInt(arr.length);
		}
		int temp = tempArr[i];
		tempArr[i] = tempArr[j];
		tempArr[j] = temp;
		return tempArr;
	}
	public static void main(String[] args) {
		simulated_annealing sa = new simulated_annealing();
		int[] y = new int[1];
		int[] x = new int[1];
		int iter=0;
		double T = 1000;
		Random r = new Random();
		int[] mu = sa.A = sa.randomN(sa.A);
		int[] sigma = sa.B = sa. randomN(sa.B);
		x=sa.multiset_C(sa.A, sa.B);
		Arrays.sort(x);

		while(T > 1) {					
			//while (sa.E(x) > 0) { //continues until the minimum is found. when fitness =0
			for (int i=0; i<500; i++) {	
				if(r.nextDouble() >= .5) 
					mu = sa.swap(sa.A);
				else 
					sigma = sa.swap(sa.B);
				y=sa.multiset_C(mu,sigma);
				Arrays.sort(y);
				if(sa.E(x) > sa.E(y)) {				//stores best fitness score
					sa.A=mu;
					sa.B=sigma;
					x = y;
					iter++;
				} else {						
					double z = r.nextDouble();
					if ( z < Math.exp((-1*sa.E(y) + sa.E(x))/T)) {	//moves to next state randomly based on Boltzmann dist
						System.out.println("T: " + T + " " + -1*sa.E(y) + sa.E(x));
						sa.A = mu;
						sa.B = sigma;
						x=y;
						iter++;
					}
				}

			}
			T = T - 1/T;
		}
		System.out.print("iterations: " + iter + " energy: " + sa.E(x) +  " C: ");
		for(int i=0; i<x.length; i++) {
			System.out.print( x[i] + " ");
		}
		System.out.println("");
		int temp=0;
		for(int i=0; i<sa.A.length; i++){ 
			temp += sa.A[i];
			System.out.print(temp + " ");
		}
		System.out.println("");
		temp=0;
		for(int i=0; i<sa.B.length; i++){
			temp += sa.B[i];
			System.out.print(temp + " ");
		}
	}

}
